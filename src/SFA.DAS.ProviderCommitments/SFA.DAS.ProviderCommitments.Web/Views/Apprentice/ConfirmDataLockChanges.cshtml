@using SFA.DAS.ProviderCommitments.Web.Extensions
@using SFA.DAS.CommitmentsV2.Shared.Extensions
@model SFA.DAS.ProviderCommitments.Web.Models.Apprentice.ConfirmDataLockChangesViewModel


@{
    ViewBag.Title = "Change apprentice details";
    ViewBag.PageID = "confirm-datalock-changes";
}

<div class="grid-row">
    <div class="column-full">
        <partial name="_ValidationSummary" />

        <h1 class="heading-xlarge">Change apprentice details</h1>

        <p>A request will be sent to @Model.EmployerName to approve the following @PluraliseString(Model.TotalChanges, "change") in the apprenticeship service.</p>

        <table class="mismatch-desc">
            <tbody>
                <tr>
                    <td class="first-child">Name</td>
                    <td class="first-child"> @Model.FirstName @Model.LastName</td>
                </tr>
                <tr>
                    <td>Unique learner number</td>
                    <td>@Model.ULN</td>
                </tr>
                <tr>
                    <td>Apprenticeship training course</td>
                    <td>@Model.CourseName</td>
                </tr>
            </tbody>
        </table>

        @{ var count = 0; }

        @foreach (var dl in Model.CourseDataLocks)
        {
            count++;

            var ilrPricePeriod = dl.IlrEffectiveToDate.HasValue
                ? $"{dl.IlrEffectiveFromDate.Value.ToGdsFormat()} to {dl.IlrEffectiveToDate.Value.ToGdsFormat()}"
                : $"{dl.IlrEffectiveFromDate.Value.ToGdsFormat()} onwards";

            var dasPricePeriod = dl.ToDate.HasValue
                ? $"{dl.FromDate.ToGdsFormat()} to {dl.ToDate.Value.ToGdsFormat()}"
                : $"{dl.FromDate.ToGdsFormat()} onwards";

            if (Model.TotalChanges > 1)
            {
                <h2 class="heading-small">Change @count</h2>
            }
            <table>
                <thead>
                    <tr>
                        <th></th>
                        <th>Currently</th>
                        <th>Change to</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>Period</td>
                        <td>
                            From @dasPricePeriod
                        </td>
                        <td>From @ilrPricePeriod</td>
                    </tr>
                    <tr>
                        <td>Apprenticeship training course</td>
                        <td>
                            @dl.TrainingName
                        </td>
                        <td>@dl.IlrTrainingName</td>
                    </tr>
                </tbody>
            </table>
            <br />
        }

        @foreach (var dl in Model.PriceDataLocks)
        {
            count++;

            var ilrPricePeriod = dl.IlrEffectiveToDate.HasValue
                ? $"{dl.IlrEffectiveFromDate.Value.ToGdsFormat()} to {dl.IlrEffectiveToDate.Value.ToGdsFormat()}"
                : $"{dl.IlrEffectiveFromDate.Value.ToGdsFormat()} onwards";

            var dasPricePeriod = dl.ToDate.HasValue
                ? $"{dl.FromDate.ToGdsFormat()} to {dl.ToDate.Value.ToGdsFormat()}"
                : $"{dl.FromDate.ToGdsFormat()} onwards";

            if (Model.TotalChanges > 1)
            {
                <h2 class="heading-small">Change @count</h2>
            }

            <table>
                <thead>
                    <tr>
                        <th></th>
                        <th>Currently</th>
                        <th>Change to</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>Price period</td>
                        <td>
                            From @dasPricePeriod
                        </td>
                        <td>From @ilrPricePeriod</td>
                    </tr>
                    <tr>
                        <td>Total apprenticeship training price</td>
                        <td>
                            @dl.Cost.FormatCost()
                        </td>
                        <td>@dl.IlrTotalCost.Value.FormatCost()</td>
                    </tr>
                </tbody>
            </table>
            <br />
        }


        <form method="post">
            <fieldset class="govuk-fieldset">
                @Html.AntiForgeryToken()

                <div class="govuk-form-group  @Html.AddClassIfPropertyInError(x => x.SubmitStatusViewModel, "govuk-form-group--error")">
                    <fieldset class="govuk-fieldset">
                        <legend class="govuk-fieldset__legend govuk-fieldset__legend--m">
                            Do you want to request @GetThisChangeText(Model.TotalChanges)?
                        </legend>
                        @Html.ValidationMessageFor(m => m.SubmitStatusViewModel, null, new { @class = "govuk-error-message", id = "error-message-" + Html.IdFor(m => m.SubmitStatusViewModel) })
                        <div class="govuk-radios">
                            <div class="govuk-radios__item">
                                <input asp-for="SubmitStatusViewModel" value="Confirm" type="radio" class="govuk-radios__input" id="SubmitStatusViewModel-Confirm" />
                                <label class="govuk-label govuk-radios__label" for="SubmitStatusViewModel-Confirm">
                                    Yes, request @GetThisChangeText(Model.TotalChanges)
                                </label>

                            </div>

                            <div class="govuk-radios__item">
                                <input asp-for="SubmitStatusViewModel" value="None" type="radio" class="govuk-radios__input" id="SubmitStatusViewModel-None" />
                                <label class="govuk-label govuk-radios__label" for="SubmitStatusViewModel-None">
                                    No, leave for now
                                </label>
                            </div>
                        </div>
                    </fieldset>
                </div>

                <div class="grid-row" id="cont-cancel">
                    <div class="column-full">
                        <input type="submit" class="button continue" id="fix-mismatch" value="Finish" />
                        <a href="@Url.Action("Details", "Apprentice")" aria-label="Cancel" class="cancel"> Cancel</a>
                    </div>
                </div>
            </fieldset>
        </form>

    @*</div>
</div>

<div class="grid-row">
    <div class="column-two-thirds">

        <form method="POST" action="@Url.Action("ConfirmDataLockChangesPost")" novalidate="novalidate">

            @Html.AntiForgeryToken()

            <div class="form-group">

                <fieldset>
                    <h2 class="heading-medium">Do you want to request @GetThisChangeText(Model.TotalChanges)?</h2>
                    <legend class="visually-hidden">How do you want to fix the mismatch?</legend>
                    <div class="form-group @Html.AddClassIfPropertyInError(x => x.SubmitStatusViewModel, "error")">
                        @Html.ValidationMessageFor(m => m.SubmitStatusViewModel, "Please choose an option", new { id = "error-message-" + Html.IdFor(m => m.SubmitStatusViewModel) })
                        <label class="block-label selection-button-radio" for="@RadioButtonId(SubmitStatusViewModel.Confirm)">
                            @Html.RadioButtonFor(m => m.SubmitStatusViewModel, SubmitStatusViewModel.Confirm, new { id = RadioButtonId(SubmitStatusViewModel.Confirm) })
                            <span>Yes, request @GetThisChangeText(Model.TotalChanges)</span>
                        </label>

                        <label class="block-label selection-button-radio" for="@RadioButtonId(SubmitStatusViewModel.None)">
                            @Html.RadioButtonFor(m => m.SubmitStatusViewModel, SubmitStatusViewModel.None, new { id = RadioButtonId(SubmitStatusViewModel.None) })
                            <span>No, leave for now</span>
                        </label>
                    </div>

                    <div class="grid-row" id="cont-cancel">
                        <div class="column-full">
                            <input type="submit" class="button continue" id="fix-mismatch" value="Finish" />
                            <a href="@Url.Action("Details", "ManageApprentices")" aria-label="Cancel" class="cancel"> Cancel</a>
                        </div>
                    </div>

                </fieldset>
            </div>
        </form>*@

    </div>
</div>


@functions
{
    

    public string GetThisChangeText(int count)
    {
        return count > 1 ? "these changes" : "this change";
    }

    string PluraliseString(int errorCount, string str)
    {
        return errorCount > 1 ? $"{str}s" : str;
    }
}

@section breadcrumb {
    <div class="breadcrumbs">
        <a href="@Url.Action("Details", "Apprentice")" aria-label="Back to apprentice details" class="back-link">Back to apprentice details</a>
    </div>
}
