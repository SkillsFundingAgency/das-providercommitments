@using SFA.DAS.CommitmentsV2.Shared.Extensions
@using SFA.DAS.ProviderCommitments.Infrastructure.OuterApi.Types
@using SFA.DAS.ProviderCommitments.Web.RouteValues
@using Microsoft.Azure.Documents.SystemFunctions
@model SFA.DAS.ProviderCommitments.Web.Models.Apprentice.TrainingDatesViewModel

@{
    var isRegular = @Model.DeliveryModel != DeliveryModel.PortableFlexiJob;
    ViewData["Title"] = isRegular ? "New training dates" : "Training Dates for this employment";
    ViewBag.GaData.Vpv = "/apprentices/change-employer/dates";
    ViewBag.GaData.Org = Model.LegalEntityName;
    var startDateLabel = isRegular ? "New training start date" : "Start date for this employment";
    var endDateLabel = isRegular ? "New training end date" : "End date for this employment";
}

<div class="govuk-grid-row">
    <div class="govuk-grid-column-two-thirds">

        <partial name="_ValidationSummary" />

        <h1 class="govuk-heading-xl">@ViewData["Title"]</h1>

        <form novalidate method="post">
            <fieldset class="govuk-fieldset" role="group" aria-describedby="start-date-hint">
                @Html.HiddenFor(x => x.CacheKey)
                @Html.HiddenFor(x => x.InEditMode)
                @Html.HiddenFor(x => x.StopDate)
                @Html.HiddenFor(x => x.EmploymentEndDate)
                @Html.HiddenFor(x => x.EmploymentPrice)
                @Html.HiddenFor(x => x.Price)
                @Html.HiddenFor(x => x.DeliveryModel)

                <p asp-show="@isRegular" class="govuk-body">The restart date must be on or after the stop date.</p>

                <table class="govuk-table">
                    <tbody class="govuk-table__body">

                        <tr class="govuk-table__row">
                            <th scope="row" class="govuk-table__header"></th>
                            <td class="govuk-table__cell"></td>
                        </tr>

                        <tr class="govuk-table__row">
                            <th asp-show="@isRegular" scope="row" class="govuk-table__header das-table-cell-width-50">Stop date</th>
                            <th asp-show="!isRegular" scope="row" class="govuk-table__cell das-table-cell-width-50">Previous employment end date</th>
                            <td id="stop-date" class="govuk-table__cell">@Model.StopDate.Value.ToGdsFormatWithoutDay()</td>
                        </tr>

                    </tbody>
                </table>
                <div class="govuk-form-group @Html.AddClassIfPropertyInError(x => x.StartDate,"govuk-form-group--error")">
                  
                        <h3 asp-show="!isRegular" class="govuk-heading-s">Enter the start date for this employment</h3>
                        <legend class="govuk-fieldset__legend govuk-fieldset__legend--s">
                            @startDateLabel
                        </legend>
                        <span id="start-date-hint" class="govuk-hint">
                            For example, 11 2019
                        </span>

                        @if (!ViewContext.ModelState.IsValid)
                        {
                            <span id="error-message-StartDate" class="govuk-error-message">
                                <span class="govuk-visually-hidden">Error:</span> @Html.ValidationMessageFor(x => x.StartDate)
                            </span>
                        }

                        <div class="govuk-date-input" id="start-date">

                            <div class="govuk-date-input__item">
                                <div class="govuk-form-group">
                                    <label class="govuk-label govuk-date-input__label" for="start-date-month">
                                        Month
                                    </label>
                                    <input class="govuk-input govuk-date-input__input govuk-input--width-2 @Html.AddClassIfPropertyInError(x => x.StartDate, "govuk-input--error")" id="start-date-month" asp-for="StartMonth" type="number" pattern="[0-9]*" inputmode="numeric">
                                </div>
                            </div>

                            <div class="govuk-date-input__item">
                                <div class="govuk-form-group">
                                    <label class="govuk-label govuk-date-input__label" for="start-date-year">
                                        Year
                                    </label>
                                    <input class="govuk-input govuk-date-input__input govuk-input--width-4 @Html.AddClassIfPropertyInError(x => x.StartDate, "govuk-input--error")" id="start-date-year" asp-for="StartYear" type="number" pattern="[0-9]*" inputmode="numeric">
                                </div>
                            </div>
                        </div>
                </div>

            </fieldset>

            <fieldset class="govuk-fieldset" aria-describedby="finish-date-hint" role="group">
                @Html.HiddenFor(x => x.EmployerAccountLegalEntityPublicHashedId)
           
                <p asp-show="@isRegular" class="govuk-body">The new training date must be after the new start date.</p>
                <p asp-show="!isRegular" class="govuk-body">Enter the end dates for this employment and for the apprenticeship training.</p>

                <div asp-show="!isRegular" class="govuk-form-group @Html.AddClassIfPropertyInError(x => x.EmploymentEndDate,"govuk-form-group--error")">

                    <h3 class="govuk-heading-s">Enter the end date for this employment</h3>

                    <span id="end-date-hint" class="govuk-hint">
                        For example, 04 2020
                    </span>

                    @if (!ViewContext.ModelState.IsValid)
                    {
                        <span id="error-message-EmploymentEndDate" class="govuk-error-message">
                            <span class="govuk-visually-hidden">Error:</span> @Html.ValidationMessageFor(x => x.EmploymentEndDate)
                        </span>
                    }

                    <div class="govuk-date-input" id="employment-end-date">

                        <div class="govuk-date-input__item">
                            <div class="govuk-form-group">
                                <label class="govuk-label govuk-date-input__label" for="employment-end-date-month">
                                    Month
                                </label>
                                <input class="govuk-input govuk-date-input__input govuk-input--width-2 @Html.AddClassIfPropertyInError(x => x.EmploymentEndDate, "govuk-input--error")" id="employment-end-date-month" asp-for="EmploymentEndMonth" type="number" pattern="[0-9]*" inputmode="numeric">
                            </div>
                        </div>

                        <div class="govuk-date-input__item">
                            <div class="govuk-form-group">
                                <label class="govuk-label govuk-date-input__label" for="employment-end-date-year">
                                    Year
                                </label>
                                <input class="govuk-input govuk-date-input__input govuk-input--width-4 @Html.AddClassIfPropertyInError(x => x.EmploymentEndDate, "govuk-input--error")" id="employment-end-date-year" asp-for="EmploymentEndYear" type="number" pattern="[0-9]*" inputmode="numeric">
                            </div>
                        </div>
                    </div>
                </div>

                <div class="govuk-form-group @Html.AddClassIfPropertyInError(x => x.EndDate,"govuk-form-group--error")">
                    <legend class="govuk-fieldset__legend govuk-fieldset__legend--s">
                        @endDateLabel
                    </legend>
                    <h3 asp-show="!isRegular" class="govuk-heading-s">Enter the projected apprenticeship training end date</h3>

                    <span id="end-date-hint" class="govuk-hint">
                        For example, 04 2020
                    </span>

                    @if (!ViewContext.ModelState.IsValid)
                    {
                        <span id="error-message-EndDate" class="govuk-error-message">
                            <span class="govuk-visually-hidden">Error:</span> @Html.ValidationMessageFor(x => x.EndDate)
                        </span>
                    }

                    <div class="govuk-date-input" id="end-date">

                        <div class="govuk-date-input__item">
                            <div class="govuk-form-group">
                                <label class="govuk-label govuk-date-input__label" for="end-date-month">
                                    Month
                                </label>
                                <input class="govuk-input govuk-date-input__input govuk-input--width-2 @Html.AddClassIfPropertyInError(x => x.EndDate, "govuk-input--error")" id="end-date-month" asp-for="EndMonth" type="number" pattern="[0-9]*" inputmode="numeric">
                            </div>
                        </div>

                        <div class="govuk-date-input__item">
                            <div class="govuk-form-group">
                                <label class="govuk-label govuk-date-input__label" for="end-date-year">
                                    Year
                                </label>
                                <input class="govuk-input govuk-date-input__input govuk-input--width-4 @Html.AddClassIfPropertyInError(x => x.EndDate, "govuk-input--error")" id="send-date-year" asp-for="EndYear" type="number" pattern="[0-9]*" inputmode="numeric">
                            </div>
                        </div>
                    </div>
                </div>               
            </fieldset>
            <button id="save-and-continue-button" class="govuk-button" type="submit" data-module="govuk-button">
                Save and continue
            </button>
        </form>
    </div>
</div>

@section breadcrumb
    {
    @{
        string backRoute = "";
        if (Model.InEditMode)
        {
            backRoute = RouteNames.ApprenticeConfirm;
        }
        else if (Model.SkippedDeliveryModelSelection)
        {
            backRoute = RouteNames.ApprenticeConfirmEmployer;
        }
        else
        {
            backRoute = RouteNames.ApprenticeSelectDeliveryModel;
        }

        var backModel = new
        {
            Model.CacheKey,
            Model.ProviderId,
            Model.ApprenticeshipHashedId
        };
    }

    <a id="back-link" class="govuk-back-link" href="@Url.RouteUrl(backRoute, backModel)">Back</a>
}